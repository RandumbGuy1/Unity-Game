using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class PlayerMove2 : MonoBehaviour
{
    private Rigidbody rb;
    public LayerMask Environment;
    public Transform camera;
    public Transform cameraBase;

    //Movement
    private float setSpeed;
    private float sprintSpeed;
    public float moveSpeed;
    public float maxSpeed;
    private float setMaxSpeed;
    private float totalMaxSpeed;
    private bool grounded;

    public float counterMovement = 0.175f;
    private float threshold = 0.01f;
    public float maxSlopeAngle = 35f;

    private bool moving;

    //Crouch & Slide
    private Vector3 crouchScale = new Vector3(1, 0.7f, 1);
    private Vector3 playerScale;
    public float slideForce = 400;
    public float slideCounterMovement = 0.2f;
    public float crouchGravityMultiplier;

    //Jumping
    private bool readyToJump = true;
    public float jumpForce;
    public Vector3 jump;

    //WallJumping
    public float wallrunForce;
    bool isWallRight, isWallLeft, isWallFront;
    bool wallRunning;
    public float maxWallRunCameraTilt;
    private float wallRunCameraTilt;
    public float wallJumpForce;
    private Vector3 wallJump;
    private bool canWallJump;
    private bool canLeaveWallRun;

    //Input
    float x, y;
    bool sprinting, crouching;

    void Awake()
    {
        rb = GetComponent<Rigidbody>();
    }

    void Start()
    {
        playerScale = transform.localScale;
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
        canWallJump = false;
        sprintSpeed = moveSpeed * 1.5f;
        setSpeed = moveSpeed;
        wallRunCameraTilt = 0f;
        canLeaveWallRun = false;
        totalMaxSpeed = 1000f;
        setMaxSpeed = maxSpeed;
    }

    void FixedUpdate()
    {
        Movement();
        Look();
    }

    void Update()
    {
        PlayerInput();
        CheckForWall();
        WallRunInput();
    }

    private void PlayerInput()
    {
        x = Input.GetAxisRaw("Horizontal");
        y = Input.GetAxisRaw("Vertical");
        sprinting = Input.GetKey(KeyCode.LeftShift);
        crouching = Input.GetKey(KeyCode.LeftControl);
        moving = Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.D);

        //Jumping
        if (Input.GetKey(KeyCode.Space) && grounded && !canWallJump)
        {
            grounded = false;
            rb.AddForce(jump * jumpForce);
        }
        
        if (Input.GetKeyDown(KeyCode.Space) && !grounded && canWallJump)
        {
            WallJump();
        }

        //Crouching
        if (Input.GetKeyDown(KeyCode.LeftControl))
            StartCrouch();
        if (Input.GetKeyUp(KeyCode.LeftControl))
            StopCrouch();
    }

    private float desiredX;

    private void Look()
    {
        camera.transform.localRotation = Quaternion.Euler(0, (-wallRunCameraTilt / 2), wallRunCameraTilt);

        if (moving) transform.localRotation = Quaternion.Euler(0, cameraBase.rotation.eulerAngles.y, 0);

        //While Wallrunning
        //Tilts camera in .5 second
        if (Math.Abs(wallRunCameraTilt) < maxWallRunCameraTilt && wallRunning && isWallRight)
        {
            wallRunCameraTilt += maxWallRunCameraTilt / 20;
            FindObjectOfType<CameraCollision>().CameraWallRun();
        }

        if (Math.Abs(wallRunCameraTilt) < maxWallRunCameraTilt && wallRunning && isWallLeft)
        {
            wallRunCameraTilt -= maxWallRunCameraTilt / 20;
            FindObjectOfType<CameraCollision>().CameraWallRun();
        }

        //Tilts camera back again
        if (wallRunCameraTilt > 0 && !isWallRight && !isWallLeft)
        {
            wallRunCameraTilt -= maxWallRunCameraTilt / 20;
            FindObjectOfType<CameraCollision>().ResetCameraWallRun();
        }

        if (wallRunCameraTilt < 0 && !isWallRight && !isWallLeft)
        {
            wallRunCameraTilt += maxWallRunCameraTilt / 20;
            FindObjectOfType<CameraCollision>().ResetCameraWallRun();
        }
    }

    private void Movement()
    {
        float gravityMultiplier = 10f;

        grounded = Physics.Raycast(transform.position, -transform.up, 1.75f, Environment);

        if (crouching) gravityMultiplier = crouchGravityMultiplier;

        rb.AddForce(-transform.up * Time.deltaTime * gravityMultiplier);

        //Find actual velocity relative to where player is looking
        Vector2 mag = FindLook();
        float xMag = mag.x, yMag = mag.y;

        CounterMovement(x, y, mag);

        if (sprinting && grounded) Sprint();
        if (!sprinting) StopSprint();

        float maxSpeed = this.maxSpeed;

        if (crouching && grounded && readyToJump)
        {
            rb.AddForce(Vector3.down * Time.deltaTime * 3000);
            return;
        }

        float multiplier = 1f, multiplierV = 1.05f;

        // Movement in air
        if (!grounded)
        {
            multiplier = 0.95f;
            multiplierV = 0.95f;
        }

        if (grounded && !crouching)
        {
            multiplier = 1f;
            multiplierV = 1.05f;
        }

        if (grounded && crouching) multiplierV = 0.01f;

        //Move the player
        rb.AddForce(transform.forward * y * moveSpeed * Time.deltaTime * multiplier * multiplierV, ForceMode.VelocityChange);
        rb.AddForce(transform.right * x * moveSpeed * Time.deltaTime * multiplier, ForceMode.VelocityChange);
    }

    private void CounterMovement(float x, float y, Vector2 mag)
    {
        if (!grounded || Input.GetKey(KeyCode.Space)) return;

        //Slow down sliding
        if (crouching)
        {
            rb.AddForce(moveSpeed * Time.deltaTime * -rb.velocity.normalized * slideCounterMovement);
            return;
        }

        //Counter movement
        if (Math.Abs(mag.x) > threshold && Math.Abs(x) < 0.05f || (mag.x < -threshold && x > 0) || (mag.x > threshold && x < 0))
        {
            rb.AddForce((moveSpeed * transform.right * Time.deltaTime * -mag.x * counterMovement) / 2);
        }
        if (Math.Abs(mag.y) > threshold && Math.Abs(y) < 0.05f || (mag.y < -threshold && y > 0) || (mag.y > threshold && y < 0))
        {
            rb.AddForce((moveSpeed * transform.forward * Time.deltaTime * -mag.y * counterMovement) / 2);
        }

        //Limit diagonal running. This will also cause a full stop if sliding fast and un-crouching, so not optimal.
        if (Mathf.Sqrt((Mathf.Pow(rb.velocity.x, 2) + Mathf.Pow(rb.velocity.z, 2))) > maxSpeed)
        {
            float fallspeed = rb.velocity.y;
            Vector3 n = (rb.velocity.normalized * maxSpeed);
            rb.velocity = new Vector3(n.x, fallspeed, n.z);
        }
    }
    
    public Vector2 FindLook()
    {
        float lookAngle = transform.eulerAngles.y;
        float moveAngle = Mathf.Atan2(rb.velocity.x, rb.velocity.z) * Mathf.Rad2Deg;

        float u = Mathf.DeltaAngle(lookAngle, moveAngle);
        float v = 90 - u;

        float magnitue = rb.velocity.magnitude;
        float yMag = magnitue * Mathf.Cos(u * Mathf.Deg2Rad);
        float xMag = magnitue * Mathf.Cos(v * Mathf.Deg2Rad);

        return new Vector2(xMag, yMag);
    }

    private void Sprint()
    {
        moveSpeed = sprintSpeed;
        maxSpeed = totalMaxSpeed;
    }

    private void StopSprint()
    {
        moveSpeed = setSpeed;
        maxSpeed = setMaxSpeed;
    }

    private void WallJump()
    {
        if (canWallJump && !grounded)
        {
            wallRunning = false;
            canWallJump = false;
            grounded = false;
            rb.AddForce(jump * jumpForce / 30f, ForceMode.Impulse);
            rb.AddForce(wallJump * wallJumpForce * 0.7f, ForceMode.Impulse);
        }
    }

    private void WallRunInput() //make sure to call in void Update
    {
        //Wallrun
        if (Input.GetKey(KeyCode.D) && Input.GetKey(KeyCode.W) && isWallRight)
        {
            Wallrun();
        }

        if (Input.GetKey(KeyCode.A) && Input.GetKey(KeyCode.W) && isWallLeft)
        {
            Wallrun();
        }
    }

    private void Wallrun()
    {
        wallRunning = true;
        rb.useGravity = false;

        if (wallRunning)
        {
            rb.AddForce(transform.forward * wallrunForce * Time.deltaTime / 2f, ForceMode.VelocityChange);

            //Make sure player sticks to wall
            if (isWallRight)
                rb.AddForce(transform.right * wallrunForce / 10 * Time.deltaTime);
            if (isWallLeft)
                rb.AddForce(-transform.right * wallrunForce / 10 * Time.deltaTime);
        }

        if (isWallRight && !Input.GetKey(KeyCode.D) || isWallLeft && !Input.GetKey(KeyCode.A)) canLeaveWallRun = false;
    }

    private void StopWallRun()
    {
        wallRunning = false;
        rb.useGravity = true;

        if (canLeaveWallRun)
        {
            rb.AddForce(-transform.up * wallJumpForce * 10f);
            rb.AddForce(wallJump * wallJumpForce * 15f);
            canLeaveWallRun = false;
        }
    }

    private void CheckForWall() //make sure to call in void Update
    {
        isWallFront = Physics.Raycast(transform.position, transform.forward, 0.99f, Environment) && !isWallLeft && !isWallRight && !grounded && moving;
        isWallRight = Physics.Raycast(transform.position, transform.right, 0.98f, Environment) && !isWallLeft && !isWallFront && !grounded && moving;
        isWallLeft = Physics.Raycast(transform.position, -transform.right, 0.98f, Environment) && !isWallRight && !isWallFront && !grounded && moving;

        if (isWallFront)
        {
            canWallJump = true;
            wallJump = -transform.forward * 1.1f;
        }

        if (isWallRight)
        {
            canWallJump = true;
            wallJump = -transform.right;
        }
        
        if (isWallLeft)
        {
            canWallJump = true;
            wallJump = transform.right;
        }

        if (!isWallLeft && !isWallRight && !isWallFront)
        {
            canWallJump = false;
            wallRunning = false;
        }

        if (wallRunning) canLeaveWallRun = true;
        if (!isWallLeft && !isWallRight && !wallRunning) StopWallRun();
    }

    private void StartCrouch()
    {
        transform.localScale = crouchScale;
        transform.position = new Vector3(transform.position.x, transform.position.y - 0.5f, transform.position.z);
        if (rb.velocity.magnitude > 50f)
        {
            if (grounded)
            {
                rb.AddForce(transform.forward * slideForce);
            }
        }
    }

    private void StopCrouch()
    {
        transform.localScale = playerScale;
        transform.position = new Vector3(transform.position.x, transform.position.y + 0.5f, transform.position.z);
    }
}
